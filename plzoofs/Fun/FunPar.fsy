%{
 (* File Fun/FunPar.fsy 
    Parser for micro-ML, a small functional language; one-argument functions.
    sestoft@itu.dk * 2009-10-19
  *)

 open Absyn;
%}

%token <int> CSTINT  /* 语义值 */
%token <string> NAME
%token <bool> CSTBOOL

%token ELSE END FALSE IF IN LET NOT THEN TRUE
%token PLUS MINUS TIMES DIV MOD
%token EQ NE GT LT GE LE
%token LPAR RPAR 
%token EOF

%left ELSE              /* lowest precedence  */
%left EQ NE 
%nonassoc GT LT GE LE
%left PLUS MINUS
%left TIMES DIV MOD 
%nonassoc NOT           /* highest precedence  */

%start Main
%type <Absyn.expr> Main Expr AtExpr Const
%type <Absyn.expr> AppExpr

%%

Main:
    Expr EOF                            { $1 }
;

Expr:
    AtExpr                              { $1                     }
  | AppExpr                             { $1                     }
  | IF Expr THEN Expr ELSE Expr         { If($2, $4, $6)         }
  | MINUS Expr                          { Prim("-", CstI 0, $2)  }
  | Expr Bop Expr                       { Prim($2,  $1, $3)     }
;

Bop: 
    PLUS                       { "+" }
  | MINUS                      { "-" }
  | TIMES                      { "*" }
  | DIV                        { "/" } 
  | MOD                        { "%" }
  | EQ                         { "=" }
  | NE                         { "<>" }
  | GT                         { ">" }
  | LT                         { "<" }
  | GE                         { ">=" }
  | LE                         { "<=" }
;

AtExpr:        /* 基本表达式 */
    Const                               { $1                     }
  | NAME                                { Var $1                 }
  | LET NAME EQ Expr IN Expr END        { Let($2, $4, $6)        }  // 局部变量绑定 
  | LET NAME NAME EQ Expr IN Expr END   { Letfun($2, $3, $5, $7) }  // 局部函数绑定 
  | LPAR Expr RPAR                      { $2                     }
;

AppExpr:       // 函数应用 
    AtExpr AtExpr                       { Call($1, $2)           }
  | AppExpr AtExpr                      { Call($1, $2)           }
;

Const:
    CSTINT                              { CstI($1)               }
  | CSTBOOL                             { CstB($1)               }
;
